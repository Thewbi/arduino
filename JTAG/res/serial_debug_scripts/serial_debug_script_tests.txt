# Test-Script 1

// ping (return is pong (0x50))
\h(02 00 03)

// reset to TEST_LOGIC_RESET (wait a couple of seconds, device will return 0x00 (RESULT_OK)
// send_tms(5, 0b11111, 1000);
\h(02 01 00 00 00 05 00 00 00 1F 03)

// to SHIFT_DR
// send_tms(4, 0b0010, 1000);
\h(02 01 00 00 00 04 00 00 00 0A 82 03)

// write 0x87654321 repeatedly, the register has to return this value repeatedly
\h(02 0A 82 00 00 00 20 87 65 43 21 00 03)
\h(02 0A 82 00 00 00 20 87 65 43 21 00 03)
\h(02 0A 82 00 00 00 20 87 65 43 21 00 03)
\h(02 0A 82 00 00 00 20 87 65 43 21 00 03)
\h(02 0A 82 00 00 00 20 87 65 43 21 00 03)





# Test-Script 2

// ping (return is pong (0x50))
\h(02 00 03)

// reset to TEST_LOGIC_RESET (wait a couple of seconds, device will return 0x00 (RESULT_OK)
// send_tms(5, 0b11111, 1000);
\h(02 01 00 00 00 05 00 00 00 1F 03)

// to SHIFT_IR
// send_tms(5, 0b00110, 1000);
\h(02 01 00 00 00 05 00 00 00 06 03)

// load SHIFT_IR with IDCODE of the dmi register (= 0x11)
//  in_data = 0x00000011;
//  read_data = 0x00;  
//  shift_data(31, &in_data, &read_data, tms_zero, 10);
//  shift_data(1, &in_data, &read_data, tms_one, 10); // on the last bit, transition to EXIT1_IR by using a tms of 1
\h(02 0A 82 00 00 00 1F 00 00 00 11 00 03)
\h(02 0A 82 00 00 00 01 00 00 00 00 01 03)

// capture IR shift into IR data (transition over CAPTURE IR) and finally into SHIFT_DR
//  send_tms(6, 0b001110, 1000);
\h(02 01 00 00 00 06 00 00 00 0E 03)


// 44 bit register. 44 / 22 = 2
// shift 22 bits, each time
// 0x35555 = 1101010101010101010101
\h(02 0A 82 00 00 00 16 0A 83 55 55 55 00 03)
\h(02 0A 82 00 00 00 16 0A 83 55 55 55 00 03)
\h(02 0A 82 00 00 00 16 0A 83 55 55 55 00 03)
\h(02 0A 82 00 00 00 16 0A 83 55 55 55 00 03)
\h(02 0A 82 00 00 00 16 0A 83 55 55 55 00 03)
\h(02 0A 82 00 00 00 16 0A 83 55 55 55 00 03)

// each time the shifted out result you get is: 55h 55h 54h 00h





# Test-Script 3 - trigger NOP operation in JTAG DTM

// 0 - ping (return is pong (0x50))
\h(02 00 03)

// 1 - reset to TEST_LOGIC_RESET (wait a couple of seconds, device will return 0x00 (RESULT_OK)
// send_tms(5, 0b11111, 1000);
\h(02 01 00 00 00 05 00 00 00 1F 03)

// 2 - to SHIFT_IR
// send_tms(5, 0b00110, 1000);
\h(02 01 00 00 00 05 00 00 00 06 03)

// 3 - load SHIFT_IR with IDCODE of the dmi register (= 0x11)
// in_data = 0x00000011;
// read_data = 0x00;  
// shift_data(31, &in_data, &read_data, tms_zero, 10);
// shift_data(1, &in_data, &read_data, tms_one, 10); // on the last bit, transition to EXIT1_IR by using a tms of 1
\h(02 0A 82 00 00 00 1F 00 00 00 11 00 03)
// 4 -
\h(02 0A 82 00 00 00 01 00 00 00 00 01 03)

// 5 - capture IR shift into IR data (transition over CAPTURE IR) and finally into SHIFT_DR
// send_tms(6, 0b001110, 1000);
\h(02 01 00 00 00 06 00 00 00 0E 03)

// write 44 bits into DTM.DMI_COMMAND
//
// [Addr, 10 bit][Data, 32 bit][Operation, 2bit]
// 0x10           0x01          01b (read) == 0x4000000005 == 0x[040][00000005] <--------- READ OPERATION
// 0x10           0x01          10b (write) == 0x4000000006 == 0x[040][00000006] <--------- WRITE OPERATION
// 0x10           0x15          10b (write) == 0x4000000056 == 0x[040][00000056] <--------- WRITE OPERATION
// 0x10           0x80000000    10b (write) == 0x4200000002 == 0x[042][00000002] <--------- WRITE OPERATION
// 0x10           0x80000000    00b (write) == 0x4200000000 == 0x[042][00000000] <--------- NOP
//
// in_data = 0x00000000;
// read_data = 0x00;
// shift_data(32, &in_data, &read_data, tms_zero, 10);
// 6 - 
\h(02 0A 82 00 00 00 20 00 00 00 00 00 03)

// in_data = 0x042;
// read_data = 0x00;
// shift_data(11, &in_data, &read_data, tms_zero, 10);
// 7 - 
\h(02 0A 82 00 00 00 0B 00 00 00 42 00 03)

// last step shifts in data and leaves the state at the same time
// in_data = 0x00;
// read_data = 0x00;
// shift_data(1, &in_data, &read_data, tms_one, 10);
// 8 - 
\h(02 0A 82 00 00 00 01 00 00 00 00 01 03)

// 9 - enter UPDATE_DR because this triggers the actual write operation towards the wishbone slave
//  printf("Enter UPDATE_DR\n");
//  send_tms(3, 0b000110, 1000);
\h(02 01 00 00 00 0A 83 00 00 00 06 03)







# Test-Script 4 - trigger HALT operation in RISCV-DebugSpec DM

// 0 - ping (return is pong (0x50))
\h(02 00 03)

// 1 - reset to TEST_LOGIC_RESET (wait a couple of seconds, device will return 0x00 (RESULT_OK)
// send_tms(5, 0b11111, 1000);
\h(02 01 00 00 00 05 00 00 00 1F 03)

// 2 - to SHIFT_IR
// send_tms(5, 0b00110, 1000);
\h(02 01 00 00 00 05 00 00 00 06 03)

// 3 - load SHIFT_IR with IDCODE of the dmi register (= 0x11)
// in_data = 0x00000011;
// read_data = 0x00;  
// shift_data(31, &in_data, &read_data, tms_zero, 10);
// shift_data(1, &in_data, &read_data, tms_one, 10); // on the last bit, transition to EXIT1_IR by using a tms of 1
\h(02 0A 82 00 00 00 1F 00 00 00 11 00 03)
// 4 -
\h(02 0A 82 00 00 00 01 00 00 00 00 01 03)

// 5 - capture IR shift into IR data (transition over CAPTURE IR) and finally into SHIFT_DR
// send_tms(6, 0b001110, 1000);
\h(02 01 00 00 00 06 00 00 00 0E 03)

// 6 - write the first 32 of 44 bits into DTM.DMI_COMMAND
//
// [Addr, 10 bit][Data, 32 bit][Operation, 2bit]
// 0x10           0x01          01b (read) == 0x4000000005 == 0x[040][00000005] <--------- READ OPERATION
// 0x10           0x01          10b (write) == 0x4000000006 == 0x[040][00000006] <--------- WRITE OPERATION
// 0x10           0x15          10b (write) == 0x4000000056 == 0x[040][00000056] <--------- WRITE OPERATION
// 0x10           0x80000000    10b (write) == 0x4200000002 == 0x[042][00000002] <--------- WRITE OPERATION
// 0x10           0x80000000    00b (write) == 0x4200000000 == 0x[042][00000000] <--------- NOP
//
// in_data = 0x00000000;
// read_data = 0x00;
// shift_data(32, &in_data, &read_data, tms_zero, 10);
\h(02 0A 82 00 00 00 20 00 00 00 0A 82 00 03)

// 7 - write another 11 bits into into DTM.DMI_COMMAND
// in_data = 0x042;
// read_data = 0x00;
// shift_data(11, &in_data, &read_data, tms_zero, 10);
\h(02 0A 82 00 00 00 0B 00 00 00 42 00 03)

// 8 - Write the last bit into DTM.DMI_COMMAND and transition out of that state
//
// last step shifts in data and leaves the state at the same time
// in_data = 0x00;
// read_data = 0x00;
// shift_data(1, &in_data, &read_data, tms_one, 10);
\h(02 0A 82 00 00 00 01 00 00 00 00 01 03)

// 9 - enter UPDATE_DR because this triggers the actual write operation towards the wishbone slave
//  printf("Enter UPDATE_DR\n");
//  send_tms(3, 0b000110, 1000);
\h(02 01 00 00 00 0A 83 00 00 00 06 03)
# Test-Script write dm.data1 register

// 0 - ping (return is pong (0x50))
\h(02 00 03)

// 1 - reset to TEST_LOGIC_RESET (wait a couple of seconds, device will return 0x00 (RESULT_OK)
// send_tms(5, 0b11111, 1000);
\h(02 01 00 00 00 05 00 00 00 1F 03)

// 2 - to SHIFT_IR
// send_tms(5, 0b00110, 1000);
\h(02 01 00 00 00 05 00 00 00 06 03)

// 3 - load SHIFT_IR with IDCODE of the dmi register (= 0x11)
// in_data = 0x00000011;
// read_data = 0x00;  
// shift_data(31, &in_data, &read_data, tms_zero, 10);
// shift_data(1, &in_data, &read_data, tms_one, 10); // on the last bit, transition to EXIT1_IR by using a tms of 1
\h(02 0A 82 00 00 00 1F 00 00 00 11 00 03)
// 4 -
\h(02 0A 82 00 00 00 01 00 00 00 00 01 03)

// 5 - capture IR shift into IR data (transition over CAPTURE IR) and finally into SHIFT_DR
// send_tms(6, 0b001110, 1000);
\h(02 01 00 00 00 06 00 00 00 0E 03)

// 6 - write the first 32 of 44 bits into DTM.DMI_COMMAND
//
// [Addr, 10 bit][Data, 32 bit][Operation, 2bit]
// 0x10           0x01          01b (read) == 0x4000000005 == 0x[040][00000005] <--------- READ OPERATION
// 0x10           0x01          10b (write) == 0x4000000006 == 0x[040][00000006] <--------- WRITE OPERATION
// 0x10           0x15          10b (write) == 0x4000000056 == 0x[040][00000056] <--------- WRITE OPERATION
// 0x10           0x80000000    10b (write) == 0x4200000002 == 0x[042][00000002] <--------- WRITE OPERATION
// 0x10           0x80000000    00b (nop) == 0x4200000000 == 0x[042][00000000] <--------- NOP
//
// write dm.data0 register
// 0x04           0x1F1F1F1F    10b (write) == 0x107C7C7C7E == 0x[010][7C7C7C7E]
//
// write dm.data1 register
// 0x05           0x1F1F1F1F    10b (write) == 0x147C7C7C7E == 0x[014][7C7C7C7E]
//
// write dm.command register
// 0x17           0x02210000    10b (write) == 0x5C08840002 == 0x[05C][08840002]
/
// write dm.command register
// 0x17           0x00000000    10b (write) == 0x5C00000002 == 0x[05C][00000002]
//
// in_data = 0x00000000;
// read_data = 0x00;
// shift_data(32, &in_data, &read_data, tms_zero, 10);
// [STX] [CMD] [NUMBER_OF_BITS_TO_SHIFT] [BITS_TO_SHIFT] [TMS_VALUE] [ETX]
\h(02 0A 82 00 00 00 20 00 00 00 0A 82 00 03)

// 7 - write another 11 bits into into DTM.DMI_COMMAND
// in_data = 0x042;
// read_data = 0x00;
// shift_data(11, &in_data, &read_data, tms_zero, 10);
// [STX] [CMD] [NUMBER_OF_BITS_TO_SHIFT] [BITS_TO_SHIFT] [TMS_VALUE] [ETX]
\h(02 0A 82 00 00 00 0B 00 00 00 5C 00 03)

// 8 - Write the last bit into DTM.DMI_COMMAND and transition out of that state
//
// last step shifts in data and leaves the state at the same time
// in_data = 0x00;
// read_data = 0x00;
// shift_data(1, &in_data, &read_data, tms_one, 10);
// [STX] [CMD] [NUMBER_OF_BITS_TO_SHIFT] [BITS_TO_SHIFT] [TMS_VALUE] [ETX]
\h(02 0A 82 00 00 00 01 00 00 00 00 01 03)

// TEST: SHIFT DATA OUT AGAIN
//\h(02 0A 82 00 00 00 20 7C 7C 7C 7E 00 03)
//\h(02 0A 82 00 00 00 0B 00 00 00 14 00 03)
//\h(02 0A 82 00 00 00 01 00 00 00 00 00 03)

//\h(02 0A 82 00 00 00 20 7C 7C 7C 7E 00 03)
//\h(02 0A 82 00 00 00 0B 00 00 00 14 00 03)
//\h(02 0A 82 00 00 00 01 00 00 00 00 00 03)

// 9 - enter UPDATE_DR because this triggers the actual write operation towards the wishbone slave
//  printf("Enter UPDATE_DR\n");
//  send_tms(3, 0b000110, 1000);
\h(02 01 00 00 00 0A 83 00 00 00 06 03)